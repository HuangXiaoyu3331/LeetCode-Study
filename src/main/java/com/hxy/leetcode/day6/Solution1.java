package com.hxy.leetcode.day6;

/**
 * 题目：各位相加
 * 给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。
 * <p>
 * 示例：
 * 输入: 38
 * 输出: 2
 * 解释: 各位相加的过程为：3 + 8 = 11, 1 + 1 = 2。 由于 2 是一位数，所以返回 2。
 *
 * @author huangxy
 * @date 2020/07/10 14:45:48
 */
public class Solution1 {

    /**
     * 时间复杂度：O(1)
     * 空间复杂度：O(1)
     * <p>
     * 思路:除个位外，每一位上的值都是通过(9+1)进位的过程得到的，
     * 把整数n看成n样物品，原本是以10个1份打包的，现在从这些10个1份打包好的里面，拿出1个，让它们以9个为1份打包
     * 原本10个现在9个1份的，打包好的物品，这些，我们不用管，直接丢弃掉，所以答案就变成了 n % 9
     * -----
     * 但是这样有一个问题，当n为9的倍数时，原本无法进1的，被打包进去了，如何解决这个问题，我们可以把n先减去1，然后再%9，后面再把1还回去
     * 这样就避免9的倍数计算错误的问题
     *
     * @param num 输入整数
     * @return 各位相加后的结果
     */
    public int addDigits(int num) {
        return (num - 1) % 9 + 1;
    }

}
